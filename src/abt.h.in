/* -*- Mode: C; c-basic-offset:4 ; indent-tabs-mode:nil ; -*- */
/*
 * See COPYRIGHT in top-level directory.
 */

#ifndef ABT_H_INCLUDED
#define ABT_H_INCLUDED

/* user include file for ARGOBOTS programs */

/* Keep C++ compilers from getting confused */
#if defined(__cplusplus)
extern "C" {
#endif

/* ABT_VERSION is the version string. ABT_NUMVERSION is the
 * numeric version that can be used in numeric comparisons.
 *
 * ABT_VERSION uses the following format:
 * Version: [MAJ].[MIN].[REV][EXT][EXT_NUMBER]
 * Example: 1.0.7rc1 has
 *          MAJ = 1
 *          MIN = 0
 *          REV = 7
 *          EXT = rc
 *          EXT_NUMBER = 1
 *
 * ABT_NUMVERSION will convert EXT to a format number:
 *          ALPHA (a) = 0
 *          BETA (b)  = 1
 *          RC (rc)   = 2
 *          PATCH (p) = 3
 * Regular releases are treated as patch 0
 *
 * Numeric version will have 1 digit for MAJ, 2 digits for MIN, 2
 * digits for REV, 1 digit for EXT and 2 digits for EXT_NUMBER. So,
 * 1.0.7rc1 will have the numeric version 10007201.
 */
#define ABT_VERSION "@ABT_VERSION@"
#define ABT_NUMVERSION @ABT_NUMVERSION@

#define ABT_RELEASE_TYPE_ALPHA  0
#define ABT_RELEASE_TYPE_BETA   1
#define ABT_RELEASE_TYPE_RC     2
#define ABT_RELEASE_TYPE_PATCH  3

#define ABT_CALC_VERSION(MAJOR, MINOR, REVISION, TYPE, PATCH) \
    (((MAJOR) * 10000000) + ((MINOR) * 100000) + ((REVISION) * 1000) + ((TYPE) * 100) + (PATCH))


/* Error Classes */
#define ABT_SUCCESS             0   /* Successful return code */
#define ABT_ERR_MEM             1   /* Memeory allocation failure */
#define ABT_ERR_INV_STREAM      2   /* Invalid stream */
#define ABT_ERR_INV_SCHEDULER   3   /* Invalid scheduler */
#define ABT_ERR_INV_THREAD      4   /* Invalid thread */
#define ABT_ERR_INV_TASK        5   /* Invalid task */
#define ABT_ERR_INV_MUTEX       6   /* Invalid mutex */
#define ABT_ERR_INV_CONDITION   7   /* Invalid condition */
#define ABT_ERR_INV_UNIT        8   /* Invalid work unit */
#define ABT_ERR_INV_POOL        9   /* Invalid pool */
#define ABT_ERR_STREAM          10  /* Stream-related error */
#define ABT_ERR_SCHEDULER       11  /* Scheduler-related error */
#define ABT_ERR_THREAD          12  /* Thread-related error */
#define ABT_ERR_TASK            13  /* Task-related error */
#define ABT_ERR_MUTEX_LOCKED    14  /* Return value when mutex is locked */
#define ABT_ERR_MUTEX           15  /* Mutex-related error */
#define ABT_ERR_CONDITION       16  /* Condition-related error */
#define ABT_ERR_UNIT            17  /* Work unit-related error */
#define ABT_ERR_POOL            18  /* Pool-related error */
#define ABT_ERR_OTHER           19  /* Other error */


/* Data Types */
typedef void *                ABT_stream;       /* Execution Stream */
typedef enum ABT_stream_state ABT_stream_state; /* ES state */
typedef void *                ABT_thread;       /* User-level Thread */
typedef enum ABT_thread_state ABT_thread_state; /* ULT state */
typedef void *                ABT_task;         /* Tasklet */
typedef enum ABT_task_state   ABT_task_state;   /* Tasklet state */
typedef void *                ABT_mutex;        /* Mutex */
typedef void *                ABT_condition;    /* Condition */
typedef void *                ABT_scheduler;    /* Scheduler */
typedef enum ABT_unit_type    ABT_unit_type;    /* Work unit type */
typedef void *                ABT_unit;         /* A work unit */
typedef void *                ABT_pool;         /* Pool of work units */


/* Null Objects */
#define ABT_STREAM_NULL     (NULL)
#define ABT_THREAD_NULL     (NULL)
#define ABT_TASK_NULL       (NULL)
#define ABT_MUTEX_NULL      (NULL)
#define ABT_CONDITION_NULL  (NULL)
#define ABT_SCHEDULER_NULL  (NULL)
#define ABT_POOL_NULL       (NULL)
#define ABT_UNIT_NULL       (NULL)


/* Contants */
enum ABT_stream_state {
    ABT_STREAM_STATE_CREATED,
    ABT_STREAM_STATE_READY,
    ABT_STREAM_STATE_RUNNING,
    ABT_STREAM_STATE_TERMINATED
};

enum ABT_thread_state {
    ABT_THREAD_STATE_READY,
    ABT_THREAD_STATE_RUNNING,
    ABT_THREAD_STATE_BLOCKED,
    ABT_THREAD_STATE_COMPLETED,
    ABT_THREAD_STATE_TERMINATED
};

enum ABT_task_state {
    ABT_TASK_STATE_CREATED,
    ABT_TASK_STATE_DELAYED,
    ABT_TASK_STATE_RUNNING,
    ABT_TASK_STATE_COMPLETED,
    ABT_TASK_STATE_TERMINATED
};

enum ABT_unit_type {
    ABT_UNIT_TYPE_THREAD,
    ABT_UNIT_TYPE_TASK,
    ABT_UNIT_TYPE_OTHER
};


/* Scheduler Functions */
typedef ABT_unit_type (*ABT_unit_get_type_fn)(ABT_unit);
typedef ABT_thread (*ABT_unit_get_thread_fn)(ABT_unit);
typedef ABT_task (*ABT_unit_get_task_fn)(ABT_unit);
typedef ABT_unit (*ABT_unit_create_from_thread_fn)(ABT_thread);
typedef ABT_unit (*ABT_unit_create_from_task_fn)(ABT_task);
typedef void (*ABT_unit_free_fn)(ABT_unit *);
typedef size_t (*ABT_pool_get_size_fn)(ABT_pool);
typedef void (*ABT_pool_push_fn)(ABT_pool, ABT_unit);
typedef ABT_unit (*ABT_pool_pop_fn)(ABT_pool);
typedef void (*ABT_pool_remove_fn)(ABT_pool, ABT_unit);

typedef struct {
    ABT_unit_get_type_fn           u_get_type;
    ABT_unit_get_thread_fn         u_get_thread;
    ABT_unit_get_task_fn           u_get_task;
    ABT_unit_create_from_thread_fn u_create_from_thread;
    ABT_unit_create_from_task_fn   u_create_from_task;
    ABT_unit_free_fn               u_free;

    ABT_pool_get_size_fn p_get_size;
    ABT_pool_push_fn     p_push;
    ABT_pool_pop_fn      p_pop;
    ABT_pool_remove_fn   p_remove;
} ABT_scheduler_funcs;


/* Init & Finalize */
int ABT_init(int argc, char **argv);
int ABT_finalize();

/* Execution Stream (ES) */
int ABT_stream_create(ABT_scheduler sched, ABT_stream *newstream);
int ABT_stream_free(ABT_stream *stream);
int ABT_stream_join(ABT_stream stream);
int ABT_stream_exit();
int ABT_stream_cancel(ABT_stream stream);
int ABT_stream_self(ABT_stream *stream);
int ABT_stream_equal(ABT_stream stream1, ABT_stream stream2, int *result);
int ABT_stream_set_scheduler(ABT_stream stream, ABT_scheduler sched);
int ABT_stream_get_state(ABT_stream stream, ABT_stream_state *state);
int ABT_stream_set_name(ABT_stream stream, const char *name);
int ABT_stream_get_name(ABT_stream stream, char *name, size_t *len);

/* User-level Thread (ULT) */
int ABT_thread_create(ABT_stream stream,
                      void (*thread_func)(void *), void *arg,
                      size_t stacksize, ABT_thread *newthread);
int ABT_thread_free(ABT_thread *thread);
int ABT_thread_join(ABT_thread thread);
int ABT_thread_exit();
int ABT_thread_cancel(ABT_thread thread);
int ABT_thread_yield();
int ABT_thread_yield_to(ABT_thread thread);
int ABT_thread_set_callback(ABT_thread thread,
                            void (*callback_func)(void *arg), void *arg);
int ABT_thread_self(ABT_thread *thread);
int ABT_thread_retain(ABT_thread thread);
int ABT_thread_release(ABT_thread thread);
int ABT_thread_equal(ABT_thread thread1, ABT_thread thread2, int *result);
int ABT_thread_get_state(ABT_thread thread, ABT_thread_state *state);
int ABT_thread_set_name(ABT_thread thread, const char *name);
int ABT_thread_get_name(ABT_thread thread, char *name, size_t *len);

/* Tasklet */
int ABT_task_create(ABT_stream stream,
                    void (*task_func)(void *), void *arg,
                    ABT_task *newtask);
int ABT_task_free(ABT_task *task);
int ABT_task_cancel(ABT_task task);
int ABT_task_retain(ABT_task task);
int ABT_task_release(ABT_task task);
int ABT_task_equal(ABT_task task1, ABT_task task2, int *result);
int ABT_task_get_state(ABT_task task, ABT_task_state *state);
int ABT_task_set_name(ABT_task task, const char *name);
int ABT_task_get_name(ABT_task task, char *name, size_t *len);

/* Scheduler */
int ABT_scheduler_create(ABT_pool pool,
                         const ABT_scheduler_funcs *funcs,
                         ABT_scheduler *newsched);
int ABT_scheduler_free(ABT_scheduler *sched);

/* Mutex */
int ABT_mutex_create(ABT_mutex *newmutex);
int ABT_mutex_free(ABT_mutex *mutex);
int ABT_mutex_lock(ABT_mutex mutex);
int ABT_mutex_trylock(ABT_mutex mutex);
int ABT_mutex_unlock(ABT_mutex mutex);

/* Condition */


#if defined(__cplusplus)
}
#endif

#endif /* ABT_H_INCLUDED */
