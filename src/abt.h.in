/* -*- Mode: C; c-basic-offset:4 ; indent-tabs-mode:nil ; -*- */
/*
 * See COPYRIGHT in top-level directory.
 */

#ifndef ABT_H_INCLUDED
#define ABT_H_INCLUDED

/* user include file for ARGOBOTS programs */

/* Keep C++ compilers from getting confused */
#if defined(__cplusplus)
extern "C" {
#endif

#include <stddef.h>
#include <stdint.h>

/* ABT_VERSION is the version string. ABT_NUMVERSION is the
 * numeric version that can be used in numeric comparisons.
 *
 * ABT_VERSION uses the following format:
 * Version: [MAJ].[MIN].[REV][EXT][EXT_NUMBER]
 * Example: 1.0.7rc1 has
 *          MAJ = 1
 *          MIN = 0
 *          REV = 7
 *          EXT = rc
 *          EXT_NUMBER = 1
 *
 * ABT_NUMVERSION will convert EXT to a format number:
 *          ALPHA (a) = 0
 *          BETA (b)  = 1
 *          RC (rc)   = 2
 *          PATCH (p) = 3
 * Regular releases are treated as patch 0
 *
 * Numeric version will have 1 digit for MAJ, 2 digits for MIN, 2
 * digits for REV, 1 digit for EXT and 2 digits for EXT_NUMBER. So,
 * 1.0.7rc1 will have the numeric version 10007201.
 */
#define ABT_VERSION "@ABT_VERSION@"
#define ABT_NUMVERSION @ABT_NUMVERSION@

#define ABT_RELEASE_TYPE_ALPHA  0
#define ABT_RELEASE_TYPE_BETA   1
#define ABT_RELEASE_TYPE_RC     2
#define ABT_RELEASE_TYPE_PATCH  3

#define ABT_CALC_VERSION(MAJOR, MINOR, REVISION, TYPE, PATCH) \
    (((MAJOR) * 10000000) + ((MINOR) * 100000) + ((REVISION) * 1000) + ((TYPE) * 100) + (PATCH))


/* Error Classes */
#define ABT_SUCCESS              0   /* Successful return code */
#define ABT_ERR_MEM              1   /* Memeory allocation failure */
#define ABT_ERR_INV_XSTREAM      2   /* Invalid ES */
#define ABT_ERR_INV_THREAD       3   /* Invalid ULT */
#define ABT_ERR_INV_THREAD_ATTR  4   /* Invalid ULT attribute */
#define ABT_ERR_INV_TASK         5   /* Invalid task */
#define ABT_ERR_INV_SCHED        6   /* Invalid scheduler */
#define ABT_ERR_INV_SCHED_KIND   7   /* Invalid scheduler kind */
#define ABT_ERR_INV_SCHED_PRIO   8   /* Invalid priority */
#define ABT_ERR_INV_UNIT         9   /* Invalid scheduling unit */
#define ABT_ERR_INV_POOL         10  /* Invalid pool */
#define ABT_ERR_INV_MUTEX        11  /* Invalid mutex */
#define ABT_ERR_INV_COND         12  /* Invalid condition variable */
#define ABT_ERR_INV_EVENTUAL     13  /* Invalid eventual */
#define ABT_ERR_INV_FUTURE       14  /* Invalid future */
#define ABT_ERR_XSTREAM          15  /* ES-related error */
#define ABT_ERR_THREAD           16  /* ULT-related error */
#define ABT_ERR_TASK             17  /* Task-related error */
#define ABT_ERR_SCHED            18  /* Scheduler-related error */
#define ABT_ERR_UNIT             19  /* Scheduling unit-related error */
#define ABT_ERR_POOL             20  /* Pool-related error */
#define ABT_ERR_MUTEX_LOCKED     21  /* Return value when mutex is locked */
#define ABT_ERR_MUTEX            22  /* Mutex-related error */
#define ABT_ERR_COND             23  /* Condition-related error */
#define ABT_ERR_EVENTUAL         24  /* Eventual-related error */
#define ABT_ERR_FUTURE           25  /* Future-related error */
#define ABT_ERR_OTHER            26  /* Other error */


/* Data Types */
typedef void *                 ABT_xstream;       /* Execution Stream */
typedef enum ABT_xstream_state ABT_xstream_state; /* ES state */
typedef void *                 ABT_thread;        /* User-level Thread */
typedef void *                 ABT_thread_attr;   /* ULT attribute */
typedef enum ABT_thread_state  ABT_thread_state;  /* ULT state */
typedef uint64_t               ABT_thread_id;     /* ULT id */
typedef void *                 ABT_task;          /* Tasklet */
typedef enum ABT_task_state    ABT_task_state;    /* Tasklet state */
typedef void *                 ABT_sched;         /* Scheduler */
typedef enum ABT_sched_kind    ABT_sched_kind;    /* Scheduler kind */
typedef enum ABT_sched_prio    ABT_sched_prio;    /* Scheduling priority */
typedef enum ABT_unit_type     ABT_unit_type;     /* Scheduling unit type */
typedef void *                 ABT_unit;          /* Scheduling unit */
typedef void *                 ABT_pool;          /* Pool */
typedef void *                 ABT_mutex;         /* Mutex */
typedef void *                 ABT_cond;          /* Condition variable */
typedef void *                 ABT_eventual;      /* Eventual */
typedef void *                 ABT_future;        /* Future */
typedef int                    ABT_bool;          /* Boolean type */

/* Null Objects */
#define ABT_XSTREAM_NULL        (NULL)
#define ABT_THREAD_NULL         (NULL)
#define ABT_THREAD_ATTR_NULL    (NULL)
#define ABT_TASK_NULL           (NULL)
#define ABT_SCHED_NULL          (NULL)
#define ABT_UNIT_NULL           (NULL)
#define ABT_POOL_NULL           (NULL)
#define ABT_MUTEX_NULL          (NULL)
#define ABT_COND_NULL           (NULL)
#define ABT_EVENTUAL_NULL       (NULL)
#define ABT_FUTURE_NULL         (NULL)

/* Constants */
enum ABT_xstream_state {
    ABT_XSTREAM_STATE_CREATED,
    ABT_XSTREAM_STATE_READY,
    ABT_XSTREAM_STATE_RUNNING,
    ABT_XSTREAM_STATE_TERMINATED
};

enum ABT_thread_state {
    ABT_THREAD_STATE_READY,
    ABT_THREAD_STATE_RUNNING,
    ABT_THREAD_STATE_BLOCKED,
    ABT_THREAD_STATE_TERMINATED
};

enum ABT_task_state {
    ABT_TASK_STATE_READY,
    ABT_TASK_STATE_RUNNING,
    ABT_TASK_STATE_TERMINATED
};

enum ABT_sched_kind {
    ABT_SCHED_FIFO,
    ABT_SCHED_LIFO,
    ABT_SCHED_PRIO
};

enum ABT_sched_prio {
    ABT_SCHED_PRIO_LOW    = 0,
    ABT_SCHED_PRIO_NORMAL = 1,
    ABT_SCHED_PRIO_HIGH   = 2
};

enum ABT_unit_type {
    ABT_UNIT_TYPE_THREAD,
    ABT_UNIT_TYPE_TASK,
    ABT_UNIT_TYPE_OTHER
};

#define ABT_TRUE    1
#define ABT_FALSE   0


/* Scheduler Functions */
typedef ABT_unit_type (*ABT_unit_get_type_fn)(ABT_unit);
typedef ABT_thread (*ABT_unit_get_thread_fn)(ABT_unit);
typedef ABT_task (*ABT_unit_get_task_fn)(ABT_unit);
typedef ABT_unit (*ABT_unit_create_from_thread_fn)(ABT_thread);
typedef ABT_unit (*ABT_unit_create_from_task_fn)(ABT_task);
typedef void (*ABT_unit_free_fn)(ABT_unit *);
typedef size_t (*ABT_pool_get_size_fn)(ABT_pool);
typedef void (*ABT_pool_push_fn)(ABT_pool, ABT_unit);
typedef ABT_unit (*ABT_pool_pop_fn)(ABT_pool);
typedef void (*ABT_pool_remove_fn)(ABT_pool, ABT_unit);

typedef struct {
    ABT_unit_get_type_fn           u_get_type;
    ABT_unit_get_thread_fn         u_get_thread;
    ABT_unit_get_task_fn           u_get_task;
    ABT_unit_create_from_thread_fn u_create_from_thread;
    ABT_unit_create_from_task_fn   u_create_from_task;
    ABT_unit_free_fn               u_free;

    ABT_pool_get_size_fn p_get_size;
    ABT_pool_push_fn     p_push;
    ABT_pool_pop_fn      p_pop;
    ABT_pool_remove_fn   p_remove;
} ABT_sched_funcs;


/* Init & Finalize */
int ABT_init(int argc, char **argv);
int ABT_finalize();

/* Execution Stream (ES) */
int ABT_xstream_create(ABT_sched sched, ABT_xstream *newxstream);
int ABT_xstream_free(ABT_xstream *xstream);
int ABT_xstream_join(ABT_xstream xstream);
int ABT_xstream_exit();
int ABT_xstream_cancel(ABT_xstream xstream);
int ABT_xstream_self(ABT_xstream *xstream);
int ABT_xstream_self_rank(int *rank);
int ABT_xstream_set_rank(ABT_xstream xstream, const int rank);
int ABT_xstream_get_rank(ABT_xstream xstream, int *rank);
int ABT_xstream_set_sched(ABT_xstream xstream, ABT_sched sched);
int ABT_xstream_get_sched(ABT_xstream xstream, ABT_sched *sched);
int ABT_xstream_get_state(ABT_xstream xstream, ABT_xstream_state *state);
int ABT_xstream_get_num_threads(ABT_xstream xstream, int *num_threads);
int ABT_xstream_get_num_tasks(ABT_xstream xstream, int *num_tasks);
int ABT_xstream_equal(ABT_xstream xstream1, ABT_xstream xstream2,
                      ABT_bool *result);
int ABT_xstream_set_name(ABT_xstream xstream, const char *name);
int ABT_xstream_get_name(ABT_xstream xstream, char *name, size_t *len);

/* User-level Thread (ULT) */
int ABT_thread_create(ABT_xstream xstream,
                      void (*thread_func)(void *), void *arg,
                      ABT_thread_attr attr, ABT_thread *newthread);
int ABT_thread_free(ABT_thread *thread);
int ABT_thread_join(ABT_thread thread);
int ABT_thread_exit();
int ABT_thread_cancel(ABT_thread thread);
int ABT_thread_self(ABT_thread *thread);
int ABT_thread_get_xstream(ABT_thread thread, ABT_xstream *xstream);
int ABT_thread_get_state(ABT_thread thread, ABT_thread_state *state);
int ABT_thread_yield_to(ABT_thread thread);
int ABT_thread_yield();
int ABT_thread_migrate_to(ABT_thread thread, ABT_xstream xstream);
int ABT_thread_migrate(ABT_thread thread);
int ABT_thread_set_callback(ABT_thread thread,
        void(*cb_func)(ABT_thread thread, void *cb_arg), void *cb_arg);
int ABT_thread_set_migratable(ABT_thread thread, ABT_bool flag);
int ABT_thread_is_migratable(ABT_thread thread, ABT_bool *flag);
int ABT_thread_equal(ABT_thread thread1, ABT_thread thread2, ABT_bool *result);
int ABT_thread_retain(ABT_thread thread);
int ABT_thread_release(ABT_thread thread);
int ABT_thread_get_stacksize(ABT_thread thread, size_t *stacksize);
int ABT_thread_set_prio(ABT_thread thread, ABT_sched_prio prio);
int ABT_thread_get_prio(ABT_thread thread, ABT_sched_prio *prio);
int ABT_thread_set_name(ABT_thread thread, const char *name);
int ABT_thread_get_name(ABT_thread thread, char *name, size_t *len);
int ABT_thread_get_id(ABT_thread thread, ABT_thread_id *thread_id);

/* ULT Attributes */
int ABT_thread_attr_create(ABT_thread_attr *newattr);
int ABT_thread_attr_free(ABT_thread_attr *attr);
int ABT_thread_attr_set_stacksize(ABT_thread_attr attr, size_t stacksize);
int ABT_thread_attr_get_stacksize(ABT_thread_attr attr, size_t *stacksize);
int ABT_thread_attr_set_prio(ABT_thread_attr attr, ABT_sched_prio prio);
int ABT_thread_attr_get_prio(ABT_thread_attr attr, ABT_sched_prio *prio);
int ABT_thread_attr_set_callback(ABT_thread_attr attr,
        void(*cb_func)(ABT_thread thread, void *cb_arg), void *cb_arg);
int ABT_thread_attr_set_migratable(ABT_thread_attr attr, ABT_bool flag);

/* Tasklet */
int ABT_task_create(ABT_xstream xstream,
                    void (*task_func)(void *), void *arg,
                    ABT_task *newtask);
int ABT_task_free(ABT_task *task);
int ABT_task_cancel(ABT_task task);
int ABT_task_self(ABT_task *task);
int ABT_task_get_state(ABT_task task, ABT_task_state *state);
int ABT_task_equal(ABT_task task1, ABT_task task2, ABT_bool *result);
int ABT_task_retain(ABT_task task);
int ABT_task_release(ABT_task task);
int ABT_task_set_name(ABT_task task, const char *name);
int ABT_task_get_name(ABT_task task, char *name, size_t *len);

/* Scheduler */
int ABT_sched_create(ABT_pool pool, const ABT_sched_funcs *funcs,
                     ABT_sched *newsched);
int ABT_sched_create_basic(ABT_sched_kind kind, ABT_sched *newsched);
int ABT_sched_free(ABT_sched *sched);
int ABT_sched_get_prio_min(ABT_sched_kind kind, ABT_sched_prio *prio);
int ABT_sched_get_prio_max(ABT_sched_kind kind, ABT_sched_prio *prio);

/* Mutex */
int ABT_mutex_create(ABT_mutex *newmutex);
int ABT_mutex_free(ABT_mutex *mutex);
int ABT_mutex_lock(ABT_mutex mutex);
int ABT_mutex_lock_ptr(ABT_mutex *mutex);
int ABT_mutex_trylock(ABT_mutex mutex);
int ABT_mutex_unlock(ABT_mutex mutex);
int ABT_mutex_unlock_ptr(ABT_mutex *mutex);
int ABT_mutex_equal(ABT_mutex mutex1, ABT_mutex mutex2, ABT_bool *result);

/* Condition variable */
int ABT_cond_create(ABT_cond *newcond);
int ABT_cond_free(ABT_cond *cond);
int ABT_cond_wait(ABT_cond cond, ABT_mutex mutex);
int ABT_cond_signal(ABT_cond cond);
int ABT_cond_broadcast(ABT_cond cond);

/* Eventual */
int ABT_eventual_create(int n, ABT_eventual *neweventual);
int ABT_eventual_free(ABT_eventual *fut);
int ABT_eventual_wait(ABT_eventual fut, void **value);
int ABT_eventual_set(ABT_eventual fut, void *value, int nbytes);

/* Futures */
int ABT_future_create(int compartments, void (*callback_func)(void **arg), ABT_future *newfuture);
int ABT_future_free(ABT_future *future);
int ABT_future_wait(ABT_future future);
int ABT_future_test(ABT_future future, int *flag);
int ABT_future_set(ABT_future future, void *value);

#if defined(__cplusplus)
}
#endif

#endif /* ABT_H_INCLUDED */
