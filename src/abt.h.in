/* -*- Mode: C; c-basic-offset:4 ; indent-tabs-mode:nil ; -*- */
/*
 * See COPYRIGHT in top-level directory.
 */

#ifndef ABT_H_INCLUDED
#define ABT_H_INCLUDED

/* user include file for ARGOBOTS programs */

/* Keep C++ compilers from getting confused */
#if defined(__cplusplus)
extern "C" {
#endif

/* ABT_VERSION is the version string. ABT_NUMVERSION is the
 * numeric version that can be used in numeric comparisons.
 *
 * ABT_VERSION uses the following format:
 * Version: [MAJ].[MIN].[REV][EXT][EXT_NUMBER]
 * Example: 1.0.7rc1 has
 *          MAJ = 1
 *          MIN = 0
 *          REV = 7
 *          EXT = rc
 *          EXT_NUMBER = 1
 *
 * ABT_NUMVERSION will convert EXT to a format number:
 *          ALPHA (a) = 0
 *          BETA (b)  = 1
 *          RC (rc)   = 2
 *          PATCH (p) = 3
 * Regular releases are treated as patch 0
 *
 * Numeric version will have 1 digit for MAJ, 2 digits for MIN, 2
 * digits for REV, 1 digit for EXT and 2 digits for EXT_NUMBER. So,
 * 1.0.7rc1 will have the numeric version 10007201.
 */
#define ABT_VERSION "@ABT_VERSION@"
#define ABT_NUMVERSION @ABT_NUMVERSION@

#define ABT_RELEASE_TYPE_ALPHA  0
#define ABT_RELEASE_TYPE_BETA   1
#define ABT_RELEASE_TYPE_RC     2
#define ABT_RELEASE_TYPE_PATCH  3

#define ABT_CALC_VERSION(MAJOR, MINOR, REVISION, TYPE, PATCH) \
    (((MAJOR) * 10000000) + ((MINOR) * 100000) + ((REVISION) * 1000) + ((TYPE) * 100) + (PATCH))


/* ARGOBOTS error classes */
#define ABT_SUCCESS         0   /* Successful return code */
#define ABT_ERR_INV_STREAM  1   /* Invalid stream */
#define ABT_ERR_INV_THREAD  2   /* Invalid thread */
#define ABT_ERR_MEM         3   /* Memeory allocation failure */
#define ABT_ERR_STREAM      4   /* Stream-related error */
#define ABT_ERR_THREAD      5   /* Thread-related error */
#define ABT_ERR_OTHER       6   /* Other error */

/* Definitions */
typedef void * ABT_Stream;
typedef void * ABT_Thread;
typedef enum ABT_Thread_state {
    ABT_THREAD_STATE_READY,
    ABT_THREAD_STATE_RUNNING,
    ABT_THREAD_STATE_TERMINATED
} ABT_Thread_state;

/* Execution Stream (ES) */
int ABT_Stream_create(ABT_Stream *newstream);
int ABT_Stream_join(ABT_Stream stream);
int ABT_Stream_free(ABT_Stream stream);
int ABT_Stream_equal(ABT_Stream stream1, ABT_Stream stream2);
ABT_Stream ABT_Stream_self();

/* User Level Thread (ULT) */
int ABT_Thread_create(const ABT_Stream stream,
                      void (*thread_func)(void *), void *arg,
                      size_t stacksize, ABT_Thread *newthread);
int ABT_Thread_yield();
int ABT_Thread_yield_to(ABT_Thread thread);
ABT_Thread_state ABT_Thread_get_state(ABT_Thread thread);

#if defined(__cplusplus)
}
#endif

#endif /* ABT_H_INCLUDED */
