/* -*- Mode: C; c-basic-offset:4 ; indent-tabs-mode:nil ; -*- */
/*
 * See COPYRIGHT in top-level directory.
 */

#ifndef ABT_H_INCLUDED
#define ABT_H_INCLUDED

#include <pthread.h>

#define _XOPEN_SOURCE
#include <ucontext.h>

/* ABT_VERSION is the version string. ABT_NUMVERSION is the
 * numeric version that can be used in numeric comparisons.
 *
 * ABT_VERSION uses the following format:
 * Version: [MAJ].[MIN].[REV][EXT][EXT_NUMBER]
 * Example: 1.0.7rc1 has
 *          MAJ = 1
 *          MIN = 0
 *          REV = 7
 *          EXT = rc
 *          EXT_NUMBER = 1
 *
 * ABT_NUMVERSION will convert EXT to a format number:
 *          ALPHA (a) = 0
 *          BETA (b)  = 1
 *          RC (rc)   = 2
 *          PATCH (p) = 3
 * Regular releases are treated as patch 0
 *
 * Numeric version will have 1 digit for MAJ, 2 digits for MIN, 2
 * digits for REV, 1 digit for EXT and 2 digits for EXT_NUMBER. So,
 * 1.0.7rc1 will have the numeric version 10007201.
 */
#define ABT_VERSION "@ABT_VERSION@"
#define ABT_NUMVERSION @ABT_NUMVERSION@

#define ABT_RELEASE_TYPE_ALPHA  0
#define ABT_RELEASE_TYPE_BETA   1
#define ABT_RELEASE_TYPE_RC     2
#define ABT_RELEASE_TYPE_PATCH  3

#define ABT_CALC_VERSION(MAJOR, MINOR, REVISION, TYPE, PATCH) \
    (((MAJOR) * 10000000) + ((MINOR) * 100000) + ((REVISION) * 1000) + ((TYPE) * 100) + (PATCH))


/* Constants */
#define ABT_SUCCESS      0
#define ABT_FAILURE      1

typedef enum ABT_thread_state {
    ABT_STATE_READY,
    ABT_STATE_RUNNING,
    ABT_STATE_BLOCKED,
    ABT_STATE_TERMINATED
} ABT_thread_state_t;

/* Definitions */
typedef struct ABT_stream ABT_stream_t;
typedef struct ABT_thread ABT_thread_t;
typedef size_t ABT_stream_id_t;
typedef size_t ABT_thread_id_t;


/* Data Structures */
struct ABT_stream {
    ABT_stream_id_t id;
    pthread_t es;
    ucontext_t ctx;
    size_t num_threads;
    ABT_thread_t *first_thread;
    ABT_thread_t *last_thread;
};

struct ABT_thread {
    ABT_stream_t *stream;

    ABT_thread_id_t id;
    ABT_thread_state_t state;
    void *stack;
    size_t stacksize;
    ucontext_t ctx;
    ABT_thread_t *prev;
    ABT_thread_t *next;
};


/* Execution Stream (ES) */
ABT_stream_t *ABT_stream_create(int *err);
int ABT_stream_start(ABT_stream_t * stream);
int ABT_stream_join(ABT_stream_t * stream);
int ABT_stream_free(ABT_stream_t * stream);
int ABT_stream_cancel(ABT_stream_t * stream);
int ABT_stream_exit();


/* User Level Thread (ULT) */
ABT_thread_t *ABT_thread_create(ABT_stream_t * stream,
                                void (*thread_func) (void *), void *arg,
                                size_t stacksize, int *err);
int ABT_thread_yield();
int ABT_thread_yield_to(ABT_thread_t * thread);

#endif /* ABT_H_INCLUDED */
